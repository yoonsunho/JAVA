# 객체 지향 프로그래밍
=> 블록 형태의 모듈화 된 프로그래밍
- 현실의 객체가 갖는 속성과 기능은 추상화 되어 클래스에 정의됨

- 클래스는 구체화 되어 프로그램의 객체가 된다
<객체(instance, object)>
: 클래스를 데이터 타입으로 메모리에 생성되어 실제로 동작하는 것

## JVM 메모리 구조
- meta-space : 클래스 정보 처리
- stack : 메서드들의 실행 공간
- heap: 객체를 저장하기 위한 영역

# 변수
1. instance맴버 변수: class 영역에 선언
    - 객체가 만들어질 때 heap에 객체 별로 생성됨
    - 객체 생성후, 객체이름으로 접근
2. 클래스 맴버 변수 :class 영역에 선언, static 키워드를 붙임(공유 변수)
    ex_ static String sciencetificName = "";
    - 변수 접근: 객체 생성과 무관하게 클래스 이름으로 접근(ex_Person.scientificName= "클래스를 통한 변경") 
3. 지역 변수 & 파라미터 변수
    : class 영역의 {} 이외의 모든 중괄호 안에 선언되는 변수들
    - 변수의 생성 : 선언된 라인 실행될 떄
    - 소멸 시점 : 선언된 영역인 {} 을 벗어날 때 


# 메서드
  : 현실의 객체가 하는 동작을 프로그래밍화

# 메서드 호출 스택
-> 스택(first-in last-out)

## 메서드 오버로딩(메서드 이름 하나, 파라미터만 다름)
    : 동일한 기능을 수행하는 메서드의 추가 작성